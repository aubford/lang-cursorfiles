---
description: 
globs: 
alwaysApply: false
---
# Strict Procedural Rules You Should Follow
Follow the procedure outlined below exactly.

## Step 1: Collect Enough Information
Before starting to think about your answer search the codebase thoroughly and collect files related to the user's query. Collect a large corpus of information from codebase files, documentation, and any other sources available to you. For example, there may be pertinent information in the following files: [_answer_relevance.py](mdc:ragas/src/ragas/metrics/_answer_relevance.py), [_answer_relevance_diverse.py](mdc:ragas/src/ragas/metrics/_answer_relevance_diverse.py), [_base_client.py](mdc:langchain-pepwave/langchain_pepwave_env/lib/python3.12/site-packages/openai/_base_client.py), [_completions.py](mdc:langchain-pepwave/langchain_pepwave_env/lib/python3.12/site-packages/openai/lib/_parsing/_completions.py), [_context_precision.py](mdc:ragas/src/ragas/metrics/_context_precision.py), [_context_recall.py](mdc:ragas/src/ragas/metrics/_context_recall.py), [_factual_correctness.py](mdc:ragas/src/ragas/metrics/_factual_correctness.py), [_faithfulness.py](mdc:ragas/src/ragas/metrics/_faithfulness.py), [_noise_sensitivity.py](mdc:ragas/src/ragas/metrics/_noise_sensitivity.py), [_nv_metrics.py](mdc:ragas/src/ragas/metrics/_nv_metrics.py), [abstract.py](mdc:ragas/src/ragas/testset/synthesizers/multi_hop/abstract.py), [advanced_rag_eval.py](mdc:langchain-pepwave/langchain_docs/cookbook/advanced_rag_eval.py), [analyze.py](mdc:langchain-pepwave/transform/mongo/analyze.py), [analyze_kg_ntbk.py](mdc:langchain-pepwave/evals/aux/analyze_kg_ntbk.py),  [analyze_and_sample_data.py](mdc:langchain-pepwave/evals/analyze_and_sample_data.py), [base.py](mdc:langchain-pepwave/langchain_pepwave_env/lib/python3.12/site-packages/langchain_core/vectorstores/base.py), [base.py](mdc:langchain-pepwave/langchain_pepwave_env/lib/python3.12/site-packages/langchain_core/runnables/base.py), [base.py](mdc:langchain-pepwave/langchain_pepwave_env/lib/python3.12/site-packages/langchain_core/language_models/base.py), [base.py](mdc:ragas/src/ragas/metrics/base.py), [base.py](mdc:ragas/src/ragas/llms/base.py), [base.py](mdc:ragas/src/ragas/llms/base.py), [base.py](mdc:ragas/src/ragas/testset/synthesizers/multi_hop/base.py), [base.py](mdc:ragas/src/ragas/prompt/base.py), [base.py](mdc:ragas/src/ragas/testset/transforms/base.py), [base.py](mdc:langchain-pepwave/langchain_pepwave_env/lib/python3.12/site-packages/langchain/chains/combine_documents/base.py), [base.py](mdc:langchain-pepwave/langchain_pepwave_env/lib/python3.12/site-packages/pandas/core/base.py), [base.py](mdc:langchain-pepwave/langchain_pepwave_env/lib/python3.12/site-packages/langchain_openai/chat_models/base.py), [base.py](mdc:langchain-pepwave/langchain_pepwave_env/lib/python3.12/site-packages/langchain_openai/embeddings/base.py), [base_load.py](mdc:langchain-pepwave/load/base_load.py), [base_transform.py](mdc:langchain-pepwave/transform/base_transform.py), [batch_llm.py](mdc:langchain-pepwave/evals/batch_llm.py), [batch_manager.py](mdc:langchain-pepwave/load/batch_manager.py), [build_knowledge_graph.py](mdc:langchain-pepwave/evals/build_knowledge_graph.py), [chat_models.py](mdc:langchain-pepwave/langchain_pepwave_env/lib/python3.12/site-packages/langchain_core/language_models/chat_models.py), [chat_result.py](mdc:langchain-pepwave/langchain_pepwave_env/lib/python3.12/site-packages/langchain_core/outputs/chat_result.py), [history_aware_retrieval_query.py](mdc:langchain-pepwave/inference/history_aware_retrieval_query.py), [client.py](mdc:langchain-pepwave/langchain_pepwave_env/lib/python3.12/site-packages/aiohttp/client.py), [client.py](mdc:Users/aubrey/.pyenv/versions/3.12.2/lib/python3.12/site-packages/ray/_private/runtime_env/agent/thirdparty_files/aiohttp/client.py), [client.py](mdc:Users/aubrey/.pyenv/versions/3.12.2/lib/python3.12/site-packages/aiohttp/client.py), [config.py](mdc:langchain-pepwave/config/config.py), [connector.py](mdc:langchain-pepwave/langchain_pepwave_env/lib/python3.12/site-packages/aiohttp/connector.py), [core.py](mdc:langchain-pepwave/langchain_pepwave_env/lib/python3.12/site-packages/tiktoken/core.py), [cosine.py](mdc:ragas/src/ragas/testset/transforms/relationship_builders/cosine.py), [dataset_schema.py](mdc:ragas/src/ragas/dataset_schema.py), [deduplication_pipeline.py](mdc:langchain-pepwave/util/deduplication_pipeline.py), [default.py](mdc:ragas/src/ragas/testset/transforms/default.py), [document_utils.py](mdc:langchain-pepwave/util/document_utils.py), [embeddings.py](mdc:langchain-pepwave/langchain_pepwave_env/lib/python3.12/site-packages/openai/resources/embeddings.py), [embeddings.py](mdc:ragas/src/ragas/testset/transforms/extractors/embeddings.py), [embeddings.py](mdc:langchain-pepwave/langchain_pepwave_env/lib/python3.12/site-packages/langchain_core/embeddings/embeddings.py), [engine.py](mdc:ragas/src/ragas/testset/transforms/engine.py), [evals_utils.py](mdc:langchain-pepwave/evals/evals_utils.py), [evaluation.py](mdc:ragas/src/ragas/evaluation.py), [events.py](mdc:Users/aubrey/.pyenv/versions/3.12.2/lib/python3.12/asyncio/events.py), [executor.py](mdc:ragas/src/ragas/executor.py), [few_shot.py](mdc:langchain-pepwave/langchain_pepwave_env/lib/python3.12/site-packages/langchain_core/prompts/few_shot.py), [few_shot_examples_chat.py](mdc:langchain-pepwave/langchain_docs/how_to/few_shot_examples_chat.py), [ForkedRedditPostsLoader.py](mdc:langchain-pepwave/extract/reddit/ForkedRedditPostsLoader.py), [generate.py](mdc:ragas/src/ragas/testset/synthesizers/generate.py), [generate_testset.py](mdc:langchain-pepwave/evals/generate_testset.py), [generic.py](mdc:langchain-pepwave/langchain_pepwave_env/lib/python3.12/site-packages/pandas/core/generic.py), [helpers.py](mdc:Users/aubrey/.pyenv/versions/3.12.2/lib/python3.12/site-packages/aiohttp/helpers.py), [helpers.py](mdc:langchain-pepwave/langchain_pepwave_env/lib/python3.12/site-packages/aiohttp/helpers.py), [helpers.py](mdc:langchain-pepwave/langchain_pepwave_env/lib/python3.12/site-packages/aiohttp/helpers.py), [helpers.py](mdc:langchain-pepwave/langchain_pepwave_env/lib/python3.12/site-packages/pyparsing/helpers.py), [history_aware_retrieval_query.py](mdc:langchain-pepwave/inference/history_aware_retrieval_query.py), [html_load.py](mdc:langchain-pepwave/load/html/html_load.py), [html_transform.py](mdc:langchain-pepwave/transform/html/html_transform.py), [html_util.py](mdc:langchain-pepwave/load/html/html_util.py), [load_all_to_vector_store.py](mdc:langchain-pepwave/load/load_all_to_vector_store.py), [main.py](mdc:langchain-pepwave/langchain_pepwave_env/lib/python3.12/site-packages/pydantic/main.py), [manager.py](mdc:langchain-pepwave/langchain_pepwave_env/lib/python3.12/site-packages/langchain_core/callbacks/manager.py), [mongo_load.py](mdc:langchain-pepwave/load/mongo/mongo_load.py), [reddit_load.py](mdc:langchain-pepwave/load/reddit/reddit_load.py), [youtube_load.py](mdc:langchain-pepwave/load/youtube/youtube_load.py), [logger.py](mdc:langchain-pepwave/config/logger.py), [mongo_pepwave_transform.py](mdc:langchain-pepwave/transform/mongo/mongo_pepwave_transform.py), [nest_asyncio.py](mdc:langchain-pepwave/langchain_pepwave_env/lib/python3.12/site-packages/nest_asyncio.py), [nlp.py](mdc:langchain-pepwave/util/nlp.py), [openai.py](mdc:Users/aubrey/workspace/langchain/libs/community/langchain_community/embeddings/openai.py), [pairwise.py](mdc:langchain-pepwave/langchain_pepwave_env/lib/python3.12/site-packages/sklearn/metrics/pairwise.py), [pinecone.py](mdc:langchain-pepwave/langchain_pepwave_env/lib/python3.12/site-packages/pinecone/control/pinecone.py), [pinecone_asyncio.py](mdc:langchain-pepwave/langchain_pepwave_env/lib/python3.12/site-packages/pinecone/control/pinecone_asyncio.py), [pydantic_prompt.py](mdc:ragas/src/ragas/prompt/pydantic_prompt.py), [rag_inference.py](mdc:langchain-pepwave/inference/rag_inference.py), [ragas_eval.py](mdc:langchain-pepwave/evals/ragas_eval.py), [rag_eval.md](mdc:ragas/docs/getstarted/rag_eval.md), [ragas_gen_testset.py](mdc:langchain-pepwave/evals/aux/ragas_gen_testset.py), [ragas_mocks.py](mdc:langchain-pepwave/evals/aux/ragas_mocks.py), [reddit_transform.py](mdc:langchain-pepwave/transform/reddit/reddit_transform.py), [README.md](mdc:README.md), [retrievers.py](mdc:langchain-pepwave/langchain_pepwave_env/lib/python3.12/site-packages/langchain_core/retrievers.py), [run.sh](mdc:run.sh), [run_config.py](mdc:ragas/src/ragas/run_config.py), [rest_utils.py](mdc:langchain-pepwave/langchain_pepwave_env/lib/python3.12/site-packages/pinecone/openapi_support/rest_utils.py), [run_eval.py](mdc:langchain-pepwave/evals/run_eval.py), [runners.py](mdc:Users/aubrey/.pyenv/versions/3.12.2/lib/python3.12/asyncio/runners.py), [serializable.py](mdc:langchain-pepwave/langchain_pepwave_env/lib/python3.12/site-packages/langchain_core/load/serializable.py), [specific.py](mdc:ragas/src/ragas/testset/synthesizers/multi_hop/specific.py), [stuff.py](mdc:langchain-pepwave/langchain_pepwave_env/lib/python3.12/site-packages/langchain/chains/combine_documents/stuff.py), [synthetic_data_loaders.py](mdc:langchain-pepwave/load/synthetic_data_loaders.py), [take_mock_exam.py](mdc:langchain-pepwave/evals/take_mock_exam.py), [testset_schema.py](mdc:ragas/src/ragas/testset/synthesizers/testset_schema.py), [traditional.py](mdc:ragas/src/ragas/testset/transforms/relationship_builders/traditional.py), [util_main.py](mdc:langchain-pepwave/util/util_main.py), [utils.py](mdc:langchain-pepwave/langchain_pepwave_env/lib/python3.12/site-packages/langchain_core/runnables/utils.py), [vectorstores.py](mdc:langchain-pepwave/langchain_pepwave_env/lib/python3.12/site-packages/langchain_pinecone/vectorstores.py). There are many more files that may have pertinent information as well!

### Important!
Make sure you have collected at least 100 distinct high quality information sources and read them thoroughly before starting to think about your anwser. Never respond until you are 100% confident that you have collected enough information to accurately answer the user's query. If you think you have enough information, continue to "## Step 2", but if you don't think you have enough information repeat "## Step 1".

## Step 2: Think
Determine the most useful pieces of information from the sources you collected and think about how they pertain to the user's query.


## Step 3: Respond
Respond concisely to the user's question using the information you collected. If you want to see more files, don't tell the user you need to see them, go back to "## Step 1" and find them yourself. Provide specific references from the information you collected to support your answer.
